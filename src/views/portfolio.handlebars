<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Home</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">
</head>
<body onload="getPortfolio();getUserBalance()">


<section style="background-color: #eee;">
    <div class="container">
        <div class="row">
            <div class="col-lg-4">
                <div class="card mb-4" style="margin-top: 20px">
                    <div class="card-body text-center">
                        <h1 style="text-align: center">Trade</h1>
                        <div style="display:flex; padding: 10px; justify-content: center;align-items: center;">
                            <button type="button" class="btn btn-dark" style="margin: 5px" onclick="toggleBuyForm()">Buy</button>
                            <button type="button" class="btn btn-dark" style="margin: 5px" onclick="toggleSellForm()">Sell</button>
                        </div>
                        <!--buy form-->
                        <form>
                            <div class="form-group" id="buyForm" style="display: block;">
                                <label for="stock">Select a team:</label>
                                <select class="form-control" id="buyTeamDropdown" oninput="calculateBuyPrice()">
                                    <option id="Montreal Canadiens">Montreal Canadiens</option>
                                    <option id="Toronto Maple Leafs">Toronto Maple Leafs</option>
                                    <option id="Boston Bruins">Boston Bruins</option>
                                    <option id="Chicago Blackhawks">Chicago Blackhawks</option>
                                    <option id="New York Rangers">New York Rangers</option>
                                    <option id="Detroit Red Wings">Detroit Red Wings</option>
                                </select>
                                <label for="quantity">Quantity</label>
                                <input type="number" class="form-control" id="buyQuantity" placeholder="Enter quantity" oninput="calculateBuyPrice()">
                                <label for="price">Estimated Purchase Cost</label>
                                <input type="text" class="form-control" id="totalBuyCost" value="0.00" readonly>
                                <br>
                                <div style="text-align: center">
                                    <button type="submit" class="btn btn-dark" onclick="submitBuyOrder()">Confirm Buy Order</button>
                                </div>
                                <br>
                            </div>
                        </form>
                        <!--sell form-->
                        <form>
                            <div class="form-group" id="sellForm" style="display: none;">
                                <label for="stock">Select a team:</label>
                                <select class="form-control" id="sellTeamDropdown" oninput="calculateSellPrice()">
                                    <option id="Montreal Canadiens">Montreal Canadiens</option>
                                    <option id="Toronto Maple Leafs">Toronto Maple Leafs</option>
                                    <option id="Boston Bruins">Boston Bruins</option>
                                    <option id="Chicago Blackhawks">Chicago Blackhawks</option>
                                    <option id="New York Rangers">New York Rangers</option>
                                    <option id="Detroit Red Wings">Detroit Red Wings</option>
                                </select>
                                <label for="quantity">Quantity</label>
                                <input type="number" class="form-control" id="sellQuantity" placeholder="Enter quantity" oninput="calculateSellPrice()">
                                <label for="price">Estimated Sale Proceeds</label>
                                <input type="text" class="form-control" id="totalSell" value="0.00" readonly>
                                <br>
                                <div style="text-align: center">
                                    <button type="submit" class="btn btn-dark" onclick="submitSellOrder()">Confirm Sell Order</button>
                                </div>
                                <br>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="card mb-4" style="margin-top: 20px">
                    <div class="card-body text-center">
                        <h1 style="text-align: center">My Portfolio</h1>
                        <table class="table" id="myTable">
                            <thead>
                            <tr>
                                <th scope="col">Team</th>
                                <th scope="col">Shares Owned</th>
                                <th scope="col">Current Price</th>
                                <th scope="col">Total</th>
                            </tr>
                            </thead>
                            <tbody id="tableBody">
                            </tbody>
                        </table>
                        <h3 id="balanceField" style="display:flex; padding: 5px; justify-content: center;align-items: center;"></h3>
                    </div>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="card mb-4" style="margin-top: 20px">
                    <div class="card-body text-center">
                        <h1 style="text-align: center">History</h1>
                        <table class="table" id="historyTable">
                            <thead>
                            <tr>
                                <th scope="col">Date</th>
                                <th scope="col">Type</th>
                                <th scope="col">Team</th>
                                <th scope="col">Shares</th>
                                <th scope="col">Total</th>
                            </tr>
                            </thead>
                            <tbody id="historyTableBody">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<style>
    .col-md-6 {
        width: 50%;
    }
</style>

<script>
    let user_portfolio = new Map();
    let user_transaction_history = new Map();
    let price_data = new Map();

    function getPortfolio() {
        const baseUrl = 'https://z340b62ka1.execute-api.us-east-2.amazonaws.com/get_user_portfolio';
        const queryParams = {
            user_id: "{{user.sub}}"
        };

        const queryString = new URLSearchParams(queryParams).toString();
        const url = `${baseUrl}?${queryString}`;

        // Send the POST request
        fetch(url, {
            method: 'GET',
        }).then(response => response.text())
                .then(data => {
                    user_portfolio = new Map(Object.entries(JSON.parse(data)["user_portfolio"]));
                    user_transaction_history = new Map(Object.entries(JSON.parse(data)["transaction_history"]));
                    generateTable()
                });
    }

    async function getPrices() {

        const baseUrl = 'https://z340b62ka1.execute-api.us-east-2.amazonaws.com/get_prices';

        const response = await fetch(baseUrl, {
            method: 'GET',
        })
        return response.json();
    }

    async function generateTable() {

        price_data = await getPrices();

        // Get the table body element
        var tableBody = document.getElementById("tableBody");
        tableBody.innerHTML = "";

        user_portfolio.forEach(function(value, key) {
            if (value <= 0) {
                return
            }
            var row = tableBody.insertRow();
            var team_cell = row.insertCell(0);
            var shares_owned_cell = row.insertCell(1);
            var current_price_cell = row.insertCell(2);
            var total_value_cell = row.insertCell(3);
            team_cell.innerHTML = key;
            shares_owned_cell.innerHTML = value;
            current_price_cell.innerHTML = parseFloat(price_data[key]).toFixed(2);
            total_value_cell.innerHTML = "$" + (parseFloat(price_data[key]) * parseFloat(value)).toFixed(2).toString();
        });

        var historyTableBody = document.getElementById("historyTableBody");
        historyTableBody.innerHTML = "";
        console.log(user_transaction_history)

        user_transaction_history.forEach(function(value, key) {
            console.log("key: " + key)
            console.log("value: " + value)
            if (value <= 0) {
                return
            }
            var row = historyTableBody.insertRow();
            var date_cell = row.insertCell(0);
            var type_cell = row.insertCell(1);
            var team_cell = row.insertCell(2);
            var shares_cell = row.insertCell(3);
            var total_cell = row.insertCell(4);
            date_cell.innerHTML = key;
            type_cell.innerHTML = value["transaction_type"];
            team_cell.innerHTML = value["team_name"];
            shares_cell.innerHTML = value["transaction_quantity"];
            total_cell.innerHTML = "$" + parseFloat(value["transaction_total"]).toFixed(2).toString();
        });
    }

    async function getUserBalance() {
        setTimeout(() => {
            const baseUrl = 'https://z340b62ka1.execute-api.us-east-2.amazonaws.com/get_user_balance';
            const queryParams = {
                user_id: "{{user.sub}}"
            };

            const queryString = new URLSearchParams(queryParams).toString();
            const url = `${baseUrl}?${queryString}`;

            fetch(url, {
                method: 'GET',
            }).then(response => response.text())
                    .then(data => {
                        user_balance = JSON.parse(data)
                        document.getElementById("balanceField").innerHTML = "Cash Balance: $" + parseFloat(user_balance).toFixed(2);
                    });
        }, 1000);
    }

    function toggleBuyForm() {
        var buyFormElement = document.getElementById("buyForm");
        var sellFormElement = document.getElementById("sellForm");
        if (buyFormElement.style.display === "none") {
            buyFormElement.style.display = "block";
        } else {
            buyFormElement.style.display = "none";
        }
        if (sellFormElement.style.display === "block") {
            sellFormElement.style.display = "none";
        } else {
            sellFormElement.style.display = "none";
        }
    }

    function toggleSellForm() {
        var buyFormElement = document.getElementById("buyForm");
        var sellFormElement = document.getElementById("sellForm");
        if (buyFormElement.style.display === "block") {
            buyFormElement.style.display = "none";
        } else {
            buyFormElement.style.display = "none";
        }
        if (sellFormElement.style.display === "block") {
            sellFormElement.style.display = "none";
        } else {
            sellFormElement.style.display = "block";
        }
    }

    function calculateBuyPrice() {
        var dropdownValue = document.getElementById("buyTeamDropdown").value;
        var calculateBuyField = document.getElementById("totalBuyCost");
        calculateBuyField.value = (price_data[dropdownValue] * document.getElementById("buyQuantity").value).toFixed(2);
    }

    function calculateSellPrice() {
        var dropdown = document.getElementById("sellTeamDropdown");
        var dropdownValue = dropdown.value;

        var calculateBuyField = document.getElementById("totalSell");
        calculateBuyField.value = (price_data[dropdownValue] * document.getElementById("sellQuantity").value).toFixed(2);
    }

    function submitBuyOrder() {
        const baseUrl = 'https://z340b62ka1.execute-api.us-east-2.amazonaws.com/buy';
        const queryParams = {
            user_id: "{{user.sub}}",
            team_name: document.getElementById("buyTeamDropdown").value,
            quantity: document.getElementById("buyQuantity").value
        };

        const queryString = new URLSearchParams(queryParams).toString();
        const url = `${baseUrl}?${queryString}`;

        fetch(url, {
            method: 'POST',
        }).then(response => response.text())
                .then(data => {
                    console.log(data)

                });
    }

    function submitSellOrder() {
        const baseUrl = 'https://z340b62ka1.execute-api.us-east-2.amazonaws.com/sell';
        const queryParams = {
            user_id: "{{user.sub}}",
            team_name: document.getElementById("sellTeamDropdown").value,
            quantity: document.getElementById("sellQuantity").value
        };

        const queryString = new URLSearchParams(queryParams).toString();
        const url = `${baseUrl}?${queryString}`;

        fetch(url, {
            method: 'POST',
        }).then(response => response.text())
                .then(data => {
                    console.log(data)
                });
    }

</script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js" integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN" crossorigin="anonymous"></script>

</body>
</html>