<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Home</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">
</head>
<style>
    /* (A) FIXED WRAPPER */
    .hwrap {
        overflow: hidden; /* HIDE SCROLL BAR */
        background: #eee;
        margin-top: -5px;
    }

    /* (B) MOVING TICKER WRAPPER */
    .hmove { display: flex; }

    /* (C) ITEMS - INTO A LONG HORIZONTAL ROW */
    .hitem {
        flex-shrink: 0;
        width: 25%;
        box-sizing: border-box;
        padding: 5px;
        text-align: center;
    }
    @media only screen and (max-width: 600px) {
        .hitem {
            flex-shrink: 0;
            width: 50%;
            box-sizing: border-box;
            padding: 5px;
            margin: 10px;
            text-align: center;
        }
    }


    /* (D) ANIMATION - MOVE ITEMS FROM RIGHT TO LEFT */
    /* 4 ITEMS -400%, CHANGE THIS IF YOU ADD/REMOVE ITEMS */
    @keyframes tickerh {
        0% { transform: translate3d(100%, 0, 0); }
        100% { transform: translate3d(-300%, 0, 0); }
    }
    .hmove { animation: tickerh linear 30s infinite; }
    .hmove:hover { animation-play-state: paused; }

    @media only screen and (max-width: 600px) {
        @keyframes tickerh {
            0% {
                transform: translate3d(100%, 0, 0);
            }
            100% {
                transform: translate3d(-700%, 0, 0);
            }
        }
    }

    .greenTriangle {
        display: inline-block;
        vertical-align: middle;
        width: 0;
        height: 0;
        border-left: 10px solid transparent;
        border-right: 10px solid transparent;
        border-bottom: 20px solid green;
    }
    .redTriangle {
        display: inline-block;
        vertical-align: middle;
        width: 0;
        height: 0;
        border-left: 10px solid transparent;
        border-right: 10px solid transparent;
        border-top: 20px solid darkred;
    }
</style>
<body onload="loadTicker(); generateLeaderboard()">
<br>

<div class="hwrap"><div class="hmove" id="tickerDiv"></div></div>

<div class="container">
    <div class="row">
        <div class="col-md-4">
        </div>
        <div class="col-md-4">
            <div class="container" onload="">
                <h1 class="text-center">Leaderboard</h1>
                <table class="table table-striped">
                    <thead>
                    <tr>
                        <th scope="col">Rank</th>
                        <th scope="col">Username</th>
                        <th scope="col">Total</th>
                    </tr>
                    </thead>
                    <tbody id="tableBody">
                    </tbody>
                </table>
            </div>
        </div>
        <div class="col-md-4">
        </div>
    </div>
</div>

<br>

<script>
    var price_data_today;
    var price_data_yesterday;

    async function getPrices() {

        const baseUrl = 'https://z340b62ka1.execute-api.us-east-2.amazonaws.com/get_prices';

        const response = await fetch(baseUrl, {
            method: 'GET',
        }).then(response => response.text())
                .then(data => {
                    price_data_today = new Map(Object.entries(JSON.parse(data)));
                });
    }

    async function getPreviousDayPrices() {

        const baseUrl = 'https://z340b62ka1.execute-api.us-east-2.amazonaws.com/get_previous_day_prices';

        const response = await fetch(baseUrl, {
            method: 'GET',
        }).then(response => response.text())
                .then(data => {
                    price_data_yesterday = new Map(Object.entries(JSON.parse(data)));
                });
    }

    async function loadTicker() {
        await getPrices()
        await getPreviousDayPrices()
        var container = document.getElementById("tickerDiv");

        price_data_today.forEach((value, key) => {
            var differential;
            var newDiv = document.createElement("div");
            newDiv.className = "hitem";
            var triangleDiv = document.createElement("triangle");

            if (parseFloat(price_data_today.get(key)) >= parseFloat(price_data_yesterday.get(key))) {
                triangleDiv.className = "greenTriangle";
                differential = parseFloat(price_data_today.get(key)) - parseFloat(price_data_yesterday.get(key));
                newDiv.textContent = `${key}: ${parseFloat(value).toFixed(2)} (+${differential.toFixed(2)})`;
                newDiv.appendChild(triangleDiv)
                container.appendChild(newDiv);
            }
            else if (parseFloat(price_data_today.get(key)) < parseFloat(price_data_yesterday.get(key))) {
                triangleDiv.className = "redTriangle";
                differential = parseFloat(price_data_yesterday.get(key)) - parseFloat(price_data_today.get(key));
                newDiv.textContent = `${key}: ${parseFloat(value).toFixed(2)} (-${differential.toFixed(2)})`;
                newDiv.appendChild(triangleDiv)
                container.appendChild(newDiv);
            }

        });
    }

    async function getLeaderboard() {

        const baseUrl = 'https://z340b62ka1.execute-api.us-east-2.amazonaws.com/leaderboard';

        const response = await fetch(baseUrl, {
            method: 'GET',
        })
        return response.json();
    }

    async function generateLeaderboard() {
        var leaderboard_data = await getLeaderboard();

        var leaderboard_map = new Map([...Object.entries(leaderboard_data)])
        console.log(leaderboard_map)
        const sortedArray = [...leaderboard_map.entries()].sort((a, b) => b[1] - a[1]);
        console.log(sortedArray)

        var tableBody = document.getElementById("tableBody");
        tableBody.innerHTML = "";
        let counter = 1;

        sortedArray.forEach(function(value, key) {
            if (value <= 0) {
                return
            }
            var row = tableBody.insertRow();
            var rank_cell = row.insertCell(0);
            var username_cell = row.insertCell(1);
            var total_cell = row.insertCell(2);
            rank_cell.innerHTML = counter;
            counter += 1;
            username_cell.innerHTML = value[0];
            total_cell.innerHTML = parseFloat(value[1]).toFixed(2);
        });
    }

</script>

</body>
</html>